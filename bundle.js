(()=>{"use strict";var n={779:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #ff9800;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffc947;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #c66900;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}',"",{version:3,sources:["webpack://./src/css/csstoggle.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,gCAAgC;EAChC,wCAAwC;EACxC,yBAAyB;EACzB,2BAA2B;EAC3B,yCAAyC;EACzC,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mCAAmC;EACnC,mBAAmB;EACnB,2BAA2B;AAC7B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;EACnB,wCAAwC;EACxC,mCAAmC;EACnC,0BAA0B;AAC5B;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:['.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #ff9800;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffc947;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #c66900;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}'],sourceRoot:""}]);const c=i},402:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'body {\n  background-color: #e2e1e0;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: fit-content;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n#searchBar {\n  border-style: none;\n  height: 1.4em\n}\n#searchBar:focus {\n  outline: none;\n}\n.submitButton {\n  border-style: none;\n  height: 1.55em;\n  background-color: #ffc947;\n  width: max-content;\n}\n.submitButton:focus {\n  outline: none;\n}\n.errorMessage {\n  position: absolute;\n  color: rgb(107, 0, 0);\n}\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday .";\n  width: 330px;\n  height: 225px;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n  background-color: #009be5;\n  color: white;\n  text-align: center;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n  font-size: xx-large;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  margin-left: .6em;\n  margin-bottom: .6em;\n  height: 1.2em;\n  width: 1.2em;\n  border-style: none;\n  border-radius: 50%;\n  background-color: #ffc947;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n}\n\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  text-align: center;\n  background-color: #ffc947;\n  margin-bottom: .7em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd;CACD;AACD;EACE,kBAAkB;EAClB,cAAc;EACd,mBAAmB;EACnB,sEAAsE;;AAExE;AACA;EACE,kBAAkB;EAClB;AACF;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,yBAAyB;EACzB,kBAAkB;AACpB;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,qBAAqB;AACvB;AACA;EACE,aAAa;EACb,wCAAwC;;EAExC,iBAAiB;EACjB,cAAc;EACd,WAAW;;EAEX,mBAAmB;EACnB,uBAAuB;;AAEzB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC;;;sBAGoB;EACpB,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,sEAAsE;;AAExE;AACA;EACE,eAAe;EACf,oBAAoB;EACpB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,oBAAoB;EACpB,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;AACpB;AACA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;EACf,iBAAiB;EACjB,mBAAmB;EACnB,aAAa;EACb,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,sEAAsE;AACxE;;;AAGA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;EACnB,sEAAsE;;AAExE",sourcesContent:['body {\n  background-color: #e2e1e0;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: fit-content;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n#searchBar {\n  border-style: none;\n  height: 1.4em\n}\n#searchBar:focus {\n  outline: none;\n}\n.submitButton {\n  border-style: none;\n  height: 1.55em;\n  background-color: #ffc947;\n  width: max-content;\n}\n.submitButton:focus {\n  outline: none;\n}\n.errorMessage {\n  position: absolute;\n  color: rgb(107, 0, 0);\n}\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday .";\n  width: 330px;\n  height: 225px;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n  background-color: #009be5;\n  color: white;\n  text-align: center;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n  font-size: xx-large;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  margin-left: .6em;\n  margin-bottom: .6em;\n  height: 1.2em;\n  width: 1.2em;\n  border-style: none;\n  border-radius: 50%;\n  background-color: #ffc947;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n}\n\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  text-align: center;\n  background-color: #ffc947;\n  margin-bottom: .7em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}'],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&o[A[0]]||(t&&(A[2]?A[2]="".concat(t," and ").concat(A[2]):A[2]=t),e.push(A))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,c=n[Symbol.iterator]();!(r=(i=c.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,a=n}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),d="/*# ".concat(A," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([d]).join("\n")}return[a].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],o=0;o<n.length;o++){var c=n[o],A=e.base?c[0]+e.base:c[0],d=t[A]||0,l="".concat(A," ").concat(d);t[A]=d+1;var s=i(l),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==s?(a[s].references++,a[s].updater(u)):a.push({identifier:l,updater:m(u,e),references:1}),r.push(l)}return r}function A(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var d,l=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function s(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function u(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,g=0;function m(n,e){var t,r,o;if(e.singleton){var a=g++;t=p||(p=A(e)),r=s.bind(null,t,a,!1),o=s.bind(null,t,a,!0)}else t=A(e),r=u.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var A=c(n,e),d=0;d<t.length;d++){var l=i(t[d]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=A}}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(402);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var o=t(779);e()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const a=(localStorage.getItem("unit")||localStorage.setItem("unit","metric"),{toggleUnit:()=>{"metric"==localStorage.getItem("unit")?localStorage.setItem("unit","imperial"):localStorage.setItem("unit","metric")},getUnit:()=>localStorage.getItem("unit")}),i=(localStorage.getItem("cities")||localStorage.setItem("cities","[]"),{today:async(n,e)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${n.replace(" ","+")}&units=${e}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()},fiveDay:async(n,e)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${n.replace(" ","+")}&cnt=5&units=${e}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()}}),c=(()=>{const n=(n,e)=>`<img src="http://openweathermap.org/img/wn/${n}@2x.png" alt="${e}"></img>`;return{icon:n,render:async()=>{const e=document.querySelector(".mainContent");let t=["vancouver","maple ridge"];for(let o=0;o<t.length;o++){const c=await i.today(t[o],a.getUnit()),A=document.createElement("div");A.classList.add("cityCard"),A.id=c.name,e.appendChild(A);const d=document.createElement("div");d.classList.add("cityName"),d.innerText=c.name,A.appendChild(d);const l=document.createElement("div");l.classList.add("currentTemp"),l.innerHTML=(r=c.main.temp,Math.round(parseFloat(r)).toString()+"&deg;"),A.appendChild(l);const s=document.createElement("div");s.classList.add("currentCondition"),s.innerHTML=c.weather[0].main,A.appendChild(s);const u=document.createElement("div");u.classList.add("conditionIcon"),u.innerHTML=n(c.weather[0].icon,c.weather[0].description),A.appendChild(u);const p=document.createElement("div");p.classList.add("deleteButton"),p.innerText="X",A.appendChild(p);const g=document.createElement("div");g.classList.add("fiveDayButton"),g.innerText="5 DAY FORECAST",A.appendChild(g)}var r}}})();(()=>{const n=document.querySelector("body");n.innerHTML="";const e=document.createElement("div");e.classList.add("container"),n.appendChild(e);const t=document.createElement("div");t.classList.add("input"),e.appendChild(t);const r=document.createElement("input");r.type="text",r.value="Enter city name",r.id="searchBar",t.appendChild(r);const o=document.createElement("button");o.classList.add("submitButton"),o.innerText="Add City",t.appendChild(o);const i=document.createElement("div");i.classList.add("errorMessage"),i.innerText="Error. Check spelling, and try again.",t.appendChild(i);const A=document.createElement("div");A.classList.add("unitSelection"),e.appendChild(A);const d=document.createElement("div");d.innerText="Farhenheight",d.id="fahr",A.appendChild(d);const l=document.createElement("label");l.classList.add("toggle"),l.setAttribute("for","unitToggle"),A.appendChild(l);const s=document.createElement("input");s.classList.add("toggle__input"),s.type="checkbox",s.id="unitToggle",s.name="","metric"==a.getUnit()&&(s.checked="yes"),l.appendChild(s);const u=document.createElement("div");u.classList.add("toggle__fill"),l.appendChild(u);const p=document.createElement("div");p.innerText="Celcius",p.id="cel",A.appendChild(p);const g=document.createElement("div");g.classList.add("mainContent"),e.appendChild(g),c.render()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,