(()=>{"use strict";var e={779:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,'.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #FFFFFF;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffffff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #009578;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}',"",{version:3,sources:["webpack://./src/css/csstoggle.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,gCAAgC;EAChC,wCAAwC;EACxC,yBAAyB;EACzB,2BAA2B;EAC3B,yCAAyC;EACzC,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mCAAmC;EACnC,mBAAmB;EACnB,2BAA2B;AAC7B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;EACnB,wCAAwC;EACxC,mCAAmC;EACnC,0BAA0B;AAC5B;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:['.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #FFFFFF;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffffff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #009578;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}'],sourceRoot:""}]);const c=o},402:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,'body {\n  background-color: darkkhaki;\n}\n\n.container {\n  position: absolute;\n  display: grid;\n  margin-left: 50%;\n  margin-right: 50%;\n  grid-template-rows: 30px 30px auto;\n}\n\n\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title temp"\n    "icon condition ."\n    "delete 5day .";\n  width: 330px;\n  height: 300px;\n  background-color: white;\n  margin: 1em;\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n}\n.deleteButton {\n  position:absolute;\n  bottom: 0;\n  left: 0;\n  height: 50px;\n  width: 50px;\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,gBAAgB;EAChB,iBAAiB;EACjB,kCAAkC;AACpC;;;AAGA;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC;;;mBAGiB;EACjB,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,WAAW;;AAEb;AACA;EACE,eAAe;EACf,oBAAoB;AACtB;AACA;EACE,gBAAgB;EAChB,oBAAoB;AACtB;AACA;EACE,iBAAiB;EACjB,SAAS;EACT,OAAO;EACP,YAAY;EACZ,WAAW;AACb",sourcesContent:['body {\n  background-color: darkkhaki;\n}\n\n.container {\n  position: absolute;\n  display: grid;\n  margin-left: 50%;\n  margin-right: 50%;\n  grid-template-rows: 30px 30px auto;\n}\n\n\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title temp"\n    "icon condition ."\n    "delete 5day .";\n  width: 330px;\n  height: 300px;\n  background-color: white;\n  margin: 1em;\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n}\n.deleteButton {\n  position:absolute;\n  bottom: 0;\n  left: 0;\n  height: 50px;\n  width: 50px;\n}'],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,a=!1,i=void 0;try{for(var o,c=e[Symbol.iterator]();!(r=(o=c.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(d," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{var r,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],a=0;a<e.length;a++){var c=e[a],d=n.base?c[0]+n.base:c[0],s=t[d]||0,l="".concat(d," ").concat(s);t[d]=s+1;var A=o(l),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(i[A].references++,i[A].updater(u)):i.push({identifier:l,updater:h(u,n),references:1}),r.push(l)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var s,l=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function A(e,n,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(n,a);else{var i=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,g=0;function h(e,n){var t,r,a;if(n.singleton){var i=g++;t=p||(p=d(n)),r=A.bind(null,t,i,!1),a=A.bind(null,t,i,!0)}else t=d(n),r=u.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var a=o(t[r]);i[a].references--}for(var d=c(e,n),s=0;s<t.length;s++){var l=o(t[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=d}}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(402);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var a=t(779);n()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;const i=(localStorage.getItem("unit")||localStorage.setItem("unit","metric"),{toggleUnit:()=>{"metric"==localStorage.getItem("unit")?localStorage.setItem("unit","imperial"):localStorage.setItem("unit","metric")},getUnit:()=>localStorage.getItem("unit")}),o=(localStorage.getItem("cities")||localStorage.setItem("cities","[]"),{today:async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e.replace(" ","+")}&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()},fiveDay:async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${e.replace(" ","+")}&cnt=5&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()}}),c=(()=>{const e=(e,n)=>`<img src="http://openweathermap.org/img/wn/${e}@2x.png" alt="${n}"></img>`;return{icon:e,render:async()=>{const n=document.querySelector(".mainContent");let t=["vancouver","maple ridge"];for(let a=0;a<t.length;a++){const c=await o.today(t[a],i.getUnit()),d=document.createElement("div");d.classList.add("cityCard"),d.id=c.name,n.appendChild(d);const s=document.createElement("div");s.classList.add("cityName"),s.innerText=c.name,d.appendChild(s);const l=document.createElement("div");l.classList.add("currentTemp"),l.innerHTML=(r=c.main.temp,Math.round(parseFloat(r)).toString()+"&deg;"),d.appendChild(l);const A=document.createElement("div");A.classList.add("currentCondition"),A.innerHTML=c.weather[0].main,d.appendChild(A);const u=document.createElement("div");u.classList.add("conditionIcon"),u.innerHTML=e(c.weather[0].icon,c.weather[0].description),d.appendChild(u);const p=document.createElement("div");p.classList.add("deleteButton"),p.innerText="X",d.appendChild(p);const g=document.createElement("div");g.classList.add("fiveDayButton"),g.innerText="5 DAY FORECAST HERE",d.appendChild(g)}var r}}})();(()=>{const e=document.querySelector("body");e.innerHTML="";const n=document.createElement("div");n.classList.add("container"),e.appendChild(n);const t=document.createElement("div");t.classList.add("input"),n.appendChild(t);const r=document.createElement("input");r.type="text",r.value="Enter city name",r.id="searchBar",t.appendChild(r);const a=document.createElement("button");a.classList.add("submitButton"),a.innerText="Add City",t.appendChild(a);const o=document.createElement("div");o.class="errorMessage",o.hidden="true",o.innerText="Error. Check spelling, and try again.",t.appendChild(o);const d=document.createElement("label");d.classList.add("toggle"),d.setAttribute("for","unitToggle"),n.appendChild(d);const s=document.createElement("input");s.classList.add("toggle__input"),s.type="checkbox",s.id="unitToggle",s.name="","metric"==i.getUnit()&&(s.checked="yes"),d.appendChild(s);const l=document.createElement("div");l.classList.add("toggle__fill"),d.appendChild(l);const A=document.createElement("div");A.classList.add("mainContent"),n.appendChild(A),c.render()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,