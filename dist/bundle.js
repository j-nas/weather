(()=>{"use strict";var e={779:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([e.id,'.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #FFFFFF;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffffff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #009578;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}',"",{version:3,sources:["webpack://./src/css/csstoggle.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,gCAAgC;EAChC,wCAAwC;EACxC,yBAAyB;EACzB,2BAA2B;EAC3B,yCAAyC;EACzC,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mCAAmC;EACnC,mBAAmB;EACnB,2BAA2B;AAC7B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;EACnB,wCAAwC;EACxC,mCAAmC;EACnC,0BAA0B;AAC5B;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:['.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #FFFFFF;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffffff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #009578;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}'],sourceRoot:""}]);const c=o},402:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([e.id,'body {\n  background-color: darkkhaki;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: 260px;\n  margin: 0 auto;\n  margin-bottom: 20px;\n}\n\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday .";\n  width: 330px;\n  height: 225px;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  left: 0;\n  height: 1.2em;\n  width: 1.2em;\n  border-style: solid;\n}\n.deleteButton:hover {\n  background-color: tomato;\n}\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  border-top-style: solid;\n  border-left-style: solid;\n  border-right-style: solid;\n  border-top-left-radius: .5em;\n  border-top-right-radius: .5em;\n  text-align: center;\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd;CACD;AACD;EACE,YAAY;EACZ,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,wCAAwC;;EAExC,iBAAiB;EACjB,cAAc;EACd,WAAW;;EAEX,mBAAmB;EACnB,uBAAuB;;AAEzB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC;;;sBAGoB;EACpB,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,eAAe;EACf,kBAAkB;;AAEpB;AACA;EACE,eAAe;EACf,oBAAoB;EACpB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,oBAAoB;AACtB;AACA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;EACf,OAAO;EACP,aAAa;EACb,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,uBAAuB;EACvB,wBAAwB;EACxB,yBAAyB;EACzB,4BAA4B;EAC5B,6BAA6B;EAC7B,kBAAkB;AACpB",sourcesContent:['body {\n  background-color: darkkhaki;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: 260px;\n  margin: 0 auto;\n  margin-bottom: 20px;\n}\n\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday .";\n  width: 330px;\n  height: 225px;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: xxx-large;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  left: 0;\n  height: 1.2em;\n  width: 1.2em;\n  border-style: solid;\n}\n.deleteButton:hover {\n  background-color: tomato;\n}\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  border-top-style: solid;\n  border-left-style: solid;\n  border-right-style: solid;\n  border-top-left-radius: .5em;\n  border-top-right-radius: .5em;\n  text-align: center;\n}'],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&i[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,i=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,i=!1,a=void 0;try{for(var o,c=e[Symbol.iterator]();!(r=(o=c.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(i)throw a}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(d," */"),A=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[a].concat(A).concat([l]).join("\n")}return[a].join("\n")}},379:(e,n,t)=>{var r,i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function o(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],i=0;i<e.length;i++){var c=e[i],d=n.base?c[0]+n.base:c[0],l=t[d]||0,A="".concat(d," ").concat(l);t[d]=l+1;var s=o(A),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==s?(a[s].references++,a[s].updater(u)):a.push({identifier:A,updater:m(u,n),references:1}),r.push(A)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function s(e,n,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=A(n,i);else{var a=document.createTextNode(i),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(a,o[n]):e.appendChild(a)}}function u(e,n,t){var r=t.css,i=t.media,a=t.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,g=0;function m(e,n){var t,r,i;if(n.singleton){var a=g++;t=p||(p=d(n)),r=s.bind(null,t,a,!1),i=s.bind(null,t,a,!0)}else t=d(n),r=u.bind(null,t,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var i=o(t[r]);a[i].references--}for(var d=c(e,n),l=0;l<t.length;l++){var A=o(t[l]);0===a[A].references&&(a[A].updater(),a.splice(A,1))}t=d}}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(402);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i=t(779);n()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;const a=(localStorage.getItem("unit")||localStorage.setItem("unit","metric"),{toggleUnit:()=>{"metric"==localStorage.getItem("unit")?localStorage.setItem("unit","imperial"):localStorage.setItem("unit","metric")},getUnit:()=>localStorage.getItem("unit")}),o=(localStorage.getItem("cities")||localStorage.setItem("cities","[]"),{today:async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e.replace(" ","+")}&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()},fiveDay:async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${e.replace(" ","+")}&cnt=5&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()}}),c=(()=>{const e=(e,n)=>`<img src="http://openweathermap.org/img/wn/${e}@2x.png" alt="${n}"></img>`;return{icon:e,render:async()=>{const n=document.querySelector(".mainContent");let t=["vancouver","maple ridge"];for(let i=0;i<t.length;i++){const c=await o.today(t[i],a.getUnit()),d=document.createElement("div");d.classList.add("cityCard"),d.id=c.name,n.appendChild(d);const l=document.createElement("div");l.classList.add("cityName"),l.innerText=c.name,d.appendChild(l);const A=document.createElement("div");A.classList.add("currentTemp"),A.innerHTML=(r=c.main.temp,Math.round(parseFloat(r)).toString()+"&deg;"),d.appendChild(A);const s=document.createElement("div");s.classList.add("currentCondition"),s.innerHTML=c.weather[0].main,d.appendChild(s);const u=document.createElement("div");u.classList.add("conditionIcon"),u.innerHTML=e(c.weather[0].icon,c.weather[0].description),d.appendChild(u);const p=document.createElement("div");p.classList.add("deleteButton"),p.innerText="X",d.appendChild(p);const g=document.createElement("div");g.classList.add("fiveDayButton"),g.innerText="5 DAY FORECAST",d.appendChild(g)}var r}}})();(()=>{const e=document.querySelector("body");e.innerHTML="";const n=document.createElement("div");n.classList.add("container"),e.appendChild(n);const t=document.createElement("div");t.classList.add("input"),n.appendChild(t);const r=document.createElement("input");r.type="text",r.value="Enter city name",r.id="searchBar",t.appendChild(r);const i=document.createElement("button");i.classList.add("submitButton"),i.innerText="Add City",t.appendChild(i);const o=document.createElement("div");o.classList.add("errorMessage"),o.hidden="true",o.innerText="Error. Check spelling, and try again.",t.appendChild(o);const d=document.createElement("div");d.classList.add("unitSelection"),n.appendChild(d);const l=document.createElement("div");l.innerText="Farhenheight",l.id="fahr",d.appendChild(l);const A=document.createElement("label");A.classList.add("toggle"),A.setAttribute("for","unitToggle"),d.appendChild(A);const s=document.createElement("input");s.classList.add("toggle__input"),s.type="checkbox",s.id="unitToggle",s.name="","metric"==a.getUnit()&&(s.checked="yes"),A.appendChild(s);const u=document.createElement("div");u.classList.add("toggle__fill"),A.appendChild(u);const p=document.createElement("div");p.innerText="Celcius",p.id="cel",d.appendChild(p);const g=document.createElement("div");g.classList.add("mainContent"),n.appendChild(g),c.render()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,