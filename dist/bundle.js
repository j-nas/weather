(()=>{"use strict";var e={779:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,'.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #ff9800;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffc947;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #c66900;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}',"",{version:3,sources:["webpack://./src/css/csstoggle.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,gCAAgC;EAChC,wCAAwC;EACxC,yBAAyB;EACzB,2BAA2B;EAC3B,yCAAyC;EACzC,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,mCAAmC;EACnC,mBAAmB;EACnB,2BAA2B;AAC7B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;EACnB,wCAAwC;EACxC,mCAAmC;EACnC,0BAA0B;AAC5B;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC",sourcesContent:['.toggle {\n  \n  --width: 50px;\n  --height: calc(var(--width) / 2);\n  --border-radius: calc(var(--height) / 2);\n  /* width: var(--width); */\n  /* height: var(--height); */\n  /* border-radius: var(--border-radius); */\n  display: inline-block;\n  cursor: pointer;\n}\n.toggle__input {\n  display: none;\n}\n\n.toggle__fill {\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  border-radius: var(--border-radius);\n  background: #ff9800;\n  transition: background 0.6s;\n}\n.toggle__fill::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: var(--height);\n  width: var(--height);\n  background: #ffc947;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n  border-radius: var(--border-radius);\n  transition: transform 0.2s;\n}\n.toggle__input:checked ~ .toggle__fill {\n  background: #c66900;\n}\n\n.toggle__input:checked ~ .toggle__fill::after {\n  transform: translateX(var(--height));\n}'],sourceRoot:""}]);const c=o},402:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,'body {\n  background-color: #e2e1e0;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: fit-content;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n#searchBar {\n  border-style: none;\n  height: 1.4em\n}\n#searchBar:focus {\n  outline: none;\n}\n.submitButton {\n  border-style: none;\n  height: 1.55em;\n  background-color: #ffc947;\n  width: max-content;\n}\n.submitButton:focus {\n  outline: none;\n}\n.errorMessage {\n  position: absolute;\n  color: rgb(107, 0, 0);\n}\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 60.23 104.55 60.23 300;\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday ."\n    "fore fore fore";\n  width: 330px;\n  height: auto;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: 20pt;\n  background-color: #009be5;\n  color: white;\n  text-align: center;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n  font-size: xx-large;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  margin-left: .6em;\n  margin-bottom: .6em;\n  height: 1.2em;\n  width: 1.2em;\n  padding: .2em;\n  border-style: none;\n  border-radius: 50%;\n  background-color: #ffc947;\n  box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);\n}\n\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  justify-self: center;\n  text-align: center;\n  background-color: #ffc947;\n  padding: .5em;\n  margin-bottom: 1.2em;\n  box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);\n\n}\n\n.forecastCard {\n  grid-area: fore;\n  width: 330px;\n  height: auto;\n  background-color: #323232;\n  \n \n  position: relative;\n}\n\ntable {\n  margin: auto;;\n}\n\nth {\n  /* background-color: #009be5; */\n  border-color: #009be5;\n  padding: 2px;\n  color: white;\n\n}\ntd {\n  color: white;\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd;CACD;AACD;EACE,kBAAkB;EAClB,cAAc;EACd,mBAAmB;EACnB,sEAAsE;;AAExE;AACA;EACE,kBAAkB;EAClB;AACF;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,yBAAyB;EACzB,kBAAkB;AACpB;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,qBAAqB;AACvB;AACA;EACE,aAAa;EACb,wCAAwC;;EAExC,iBAAiB;EACjB,cAAc;EACd,WAAW;;EAEX,mBAAmB;EACnB,uBAAuB;;AAEzB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,aAAa;EACb,qCAAqC;EACrC,0CAA0C;EAC1C;;;;oBAIkB;EAClB,YAAY;EACZ,YAAY;EACZ,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,sEAAsE;;AAExE;AACA;EACE,eAAe;EACf,oBAAoB;EACpB,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;AACpB;AACA;EACE,eAAe;AACjB;AACA;EACE,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;EACf,iBAAiB;EACjB,mBAAmB;EACnB,aAAa;EACb,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,mEAAmE;AACrE;;;AAGA;EACE,kBAAkB;EAClB,eAAe;EACf,oBAAoB;EACpB,kBAAkB;EAClB,yBAAyB;EACzB,aAAa;EACb,oBAAoB;EACpB,mEAAmE;;AAErE;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,YAAY;EACZ,yBAAyB;;;EAGzB,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,+BAA+B;EAC/B,qBAAqB;EACrB,YAAY;EACZ,YAAY;;AAEd;AACA;EACE,YAAY;AACd",sourcesContent:['body {\n  background-color: #e2e1e0;\n}\n\n.container {\n  position: relative;\n  display: block;\n  margin: 0 auto;\n  width: 330px\n }\n.input {\n  width: fit-content;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n#searchBar {\n  border-style: none;\n  height: 1.4em\n}\n#searchBar:focus {\n  outline: none;\n}\n.submitButton {\n  border-style: none;\n  height: 1.55em;\n  background-color: #ffc947;\n  width: max-content;\n}\n.submitButton:focus {\n  outline: none;\n}\n.errorMessage {\n  position: absolute;\n  color: rgb(107, 0, 0);\n}\n.unitSelection {\n  display: grid;\n  grid-template-columns: 110px 110px 110px;\n  \n  position:relative;\n  margin: 0 auto;\n  width: 90px;\n\n  /* display: flex; */\n  justify-content: center;\n  \n}\n#fahr {\n  grid-column: 1;\n  justify-self: right;\n}\n.toggle {\n  grid-column: 2;\n  place-self: center;\n}\n\n#cel {\n  grid-column: 3;\n}\n.cityCard {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 60.23 104.55 60.23 300;\n  grid-template-areas: \n    "title title title"\n    "icon condition temp"\n    "delete fiveday ."\n    "fore fore fore";\n  width: 330px;\n  height: auto;\n  background-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\n}\n.currentTemp {\n  grid-area: temp;\n  font-size: xxx-large;\n  place-self: center;\n}\n.cityName {\n  grid-area: title;\n  font-size: 20pt;\n  background-color: #009be5;\n  color: white;\n  text-align: center;\n}\n.conditionIcon {\n  grid-area: icon;\n}\n.currentCondition {\n  grid-area: condition;\n  place-self: center;\n  font-size: xx-large;\n}\n\n.deleteButton {\n  grid-area: delete;\n  align-self:end;\n  justify-self: left;\n  text-align: center;\n  text-justify: center;\n  font-size: 20pt;\n  margin-left: .6em;\n  margin-bottom: .6em;\n  height: 1.2em;\n  width: 1.2em;\n  padding: .2em;\n  border-style: none;\n  border-radius: 50%;\n  background-color: #ffc947;\n  box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);\n}\n\n\n.fiveDayButton {\n  grid-area: fiveday;\n  align-self: end;\n  justify-self: center;\n  text-align: center;\n  background-color: #ffc947;\n  padding: .5em;\n  margin-bottom: 1.2em;\n  box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);\n\n}\n\n.forecastCard {\n  grid-area: fore;\n  width: 330px;\n  height: auto;\n  background-color: #323232;\n  \n \n  position: relative;\n}\n\ntable {\n  margin: auto;;\n}\n\nth {\n  /* background-color: #009be5; */\n  border-color: #009be5;\n  padding: 2px;\n  color: white;\n\n}\ntd {\n  color: white;\n}\n'],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,a=!1,i=void 0;try{for(var o,c=e[Symbol.iterator]();!(r=(o=c.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(d," */"),A=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{var r,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],a=0;a<e.length;a++){var c=e[a],d=n.base?c[0]+n.base:c[0],l=t[d]||0,A="".concat(d," ").concat(l);t[d]=l+1;var s=o(A),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==s?(i[s].references++,i[s].updater(u)):i.push({identifier:A,updater:m(u,n),references:1}),r.push(A)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function s(e,n,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=A(n,a);else{var i=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var g=null,p=0;function m(e,n){var t,r,a;if(n.singleton){var i=p++;t=g||(g=d(n)),r=s.bind(null,t,i,!1),a=s.bind(null,t,i,!0)}else t=d(n),r=u.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var a=o(t[r]);i[a].references--}for(var d=c(e,n),l=0;l<t.length;l++){var A=o(t[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=d}}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(402);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var a=t(779);n()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;const i=(localStorage.getItem("unit")||localStorage.setItem("unit","metric"),{toggleUnit:()=>{"metric"==localStorage.getItem("unit")?localStorage.setItem("unit","imperial"):localStorage.setItem("unit","metric")},getUnit:()=>localStorage.getItem("unit")}),o=(()=>{localStorage.getItem("cities")||localStorage.setItem("cities",JSON.stringify([]));const e=()=>JSON.parse(localStorage.getItem("cities"));return{addCity:n=>{let t=e();t.push(n),localStorage.setItem("cities",JSON.stringify(t))},getCities:e,delCity:n=>{let t=e();localStorage.setItem("cities",JSON.stringify(t.filter((e=>e==n))))}}})(),c=async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e.replace(" ","+")}&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()},d=async(e,n)=>{const t=await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${e.replace(" ","+")}&units=${n}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return await t.json()};function l(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function A(e){l(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function s(e){l(1,arguments);var n=A(e),t=n.getDay();return t}function u(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}var g=36e5,p={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},m=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,f=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,h=/^([+-])(\d{2})(?::?(\d{2}))?$/;function C(e,n){l(1,arguments);var t=n||{},r=null==t.additionalDigits?2:u(t.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=E(e);if(i.date){var o=B(i.date,r);a=b(o.restDateString,o.year)}if(isNaN(a)||!a)return new Date(NaN);var c,d=a.getTime(),A=0;if(i.time&&(A=y(i.time),isNaN(A)||null===A))return new Date(NaN);if(!i.timezone){var s=new Date(d+A),g=new Date(0);return g.setFullYear(s.getUTCFullYear(),s.getUTCMonth(),s.getUTCDate()),g.setHours(s.getUTCHours(),s.getUTCMinutes(),s.getUTCSeconds(),s.getUTCMilliseconds()),g}return c=x(i.timezone),isNaN(c)?new Date(NaN):new Date(d+A+c)}function E(e){var n,t={},r=e.split(p.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?(t.date=null,n=r[0]):(t.date=r[0],n=r[1],p.timeZoneDelimiter.test(t.date)&&(t.date=e.split(p.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var a=p.timezone.exec(n);a?(t.time=n.replace(a[1],""),t.timezone=a[1]):t.time=n}return t}function B(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),i=r[2]&&parseInt(r[2]);return{year:null==i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function b(e,n){if(null===n)return null;var t=e.match(m);if(!t)return null;var r=!!t[4],a=v(t[1]),i=v(t[2])-1,o=v(t[3]),c=v(t[4]),d=v(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,c,d)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,c,d):new Date(NaN);var l=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(k[n]||(S(e)?29:28))}(n,i,o)&&function(e,n){return n>=1&&n<=(S(e)?366:365)}(n,a)?(l.setUTCFullYear(n,i,Math.max(a,o)),l):new Date(NaN)}function v(e){return e?parseInt(e):1}function y(e){var n=e.match(f);if(!n)return null;var t=w(n[1]),r=w(n[2]),a=w(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,a)?t*g+6e4*r+1e3*a:NaN}function w(e){return e&&parseFloat(e.replace(",","."))||0}function x(e){if("Z"===e)return 0;var n=e.match(h);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,a)?t*(r*g+6e4*a):NaN}var k=[31,null,31,30,31,30,31,31,30,31,30,31];function S(e){return e%400==0||e%4==0&&e%100}const T=(()=>{const e=(e,n)=>`<img src="http://openweathermap.org/img/wn/${e}@2x.png" alt="${n}"></img>`,n=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];return{icon:e,render:async()=>{let t=await o.getCities();const r=document.querySelector(".mainContent");r.innerHTML="";for(let o=0;o<t.length;o++){const u=await c(t[o],i.getUnit());console.log(u);const g=await d(t[o],i.getUnit()),p=document.createElement("div");p.classList.add("cityCard"),p.id=u.name,r.appendChild(p);const m=document.createElement("div");m.classList.add("cityName"),m.innerText=u.name+", "+u.sys.country,p.appendChild(m);const f=document.createElement("div");f.classList.add("currentTemp"),f.innerHTML=(A=u.main.temp,Math.round(parseFloat(A)).toString()+"&deg;"),p.appendChild(f);const h=document.createElement("div");h.classList.add("currentCondition"),h.innerHTML=u.weather[0].main,p.appendChild(h);const E=document.createElement("div");E.classList.add("conditionIcon"),E.innerHTML=e(u.weather[0].icon,u.weather[0].description),p.appendChild(E);const B=document.createElement("div");B.classList.add("deleteButton"),B.innerText="X",p.appendChild(B);const b=document.createElement("div");b.classList.add("fiveDayButton"),b.innerText="FiveCast",p.appendChild(b);const v=document.createElement("div");v.classList.add("forecastCard"),p.appendChild(v),v.hidden=!0;const y=document.createElement("table");v.appendChild(y);const w=document.createElement("tr");w.innerHTML="<th>Day</th><th>Temp</th><th>Weather</th><th>POP%</th><th>High</th><th>Low</th>",y.appendChild(w);for(let e=6;e<40;e+=7){let t=document.createElement("tr");t.innerHTML=`<td>${n[s(C(g.list[e].dt_txt))]}</td><td>${g.list[e].main.temp}&deg;</td><td>${a=g.list[e].weather[0].icon,l=g.list[e].weather[0].description,`<img src="http://openweathermap.org/img/wn/${a}.png" alt="${l}"></img>`}</td><td>${parseInt(100*g.list[e].pop)}%</td><td>${g.list[e].main.temp_min}&deg;</td><td>${g.list[e].main.temp_min}&deg;</td>`,y.appendChild(t)}}var a,l,A}}})();document.querySelector("body").addEventListener("click",(async e=>{if("unitToggle"==e.target.id&&(i.toggleUnit(),T.render()),"submitButton"==e.target.classList){const e=document.getElementById("searchBar");let n=await async function(e){const n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e.replace(" ","+")}&APPID=ffeb3c454a61829a57de59148fa37655`,{mode:"cors"});return(await n.json()).name}(e.value);const t=document.querySelector(".errorMessage");if("404"==n||"401"==n)return void(t.hidden=!1);t.hidden=!0,o.addCity(n),T.render()}})),(()=>{const e=document.querySelector("body");e.innerHTML="";const n=document.createElement("div");n.classList.add("container"),e.appendChild(n);const t=document.createElement("div");t.classList.add("input"),n.appendChild(t);const r=document.createElement("input");r.type="text",r.value="Enter city name",r.id="searchBar",t.appendChild(r);const a=document.createElement("button");a.classList.add("submitButton"),a.innerText="Add City",t.appendChild(a);const o=document.createElement("div");o.classList.add("errorMessage"),o.hidden="true",o.innerText="Error. Check spelling, and try again.",t.appendChild(o);const c=document.createElement("div");c.classList.add("unitSelection"),n.appendChild(c);const d=document.createElement("div");d.innerText="Farhenheight",d.id="fahr",c.appendChild(d);const l=document.createElement("label");l.classList.add("toggle"),l.setAttribute("for","unitToggle"),c.appendChild(l);const A=document.createElement("input");A.classList.add("toggle__input"),A.type="checkbox",A.id="unitToggle",A.name="","metric"==i.getUnit()&&(A.checked="yes"),l.appendChild(A);const s=document.createElement("div");s.classList.add("toggle__fill"),l.appendChild(s);const u=document.createElement("div");u.innerText="Celcius",u.id="cel",c.appendChild(u);const g=document.createElement("div");g.classList.add("mainContent"),n.appendChild(g),T.render()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,